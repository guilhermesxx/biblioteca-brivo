from django.core.mail import send_mail
from django.conf import settings
from datetime import timedelta, date
from django.utils.timezone import now # Importado 'now' diretamente para uso
import logging

# Importa√ß√µes de modelos
from .models import Emprestimo, Reserva, HistoricoAcao, AlertaSistema, Usuario, Livro

# Importar templates de email configur√°veis
from .email_templates import (
    EMAIL_BOAS_VINDAS, EMAIL_CONFIRMACAO_RESERVA, EMAIL_LEMBRETE_RETIRADA,
    EMAIL_RESERVA_CANCELADA, EMAIL_EMPRESTIMO_CONFIRMADO, EMAIL_LEMBRETE_DEVOLUCAO_3_DIAS,
    EMAIL_LIVRO_ATRASO, EMAIL_DEVOLUCAO_CONFIRMADA, EMAIL_ENTRADA_FILA,
    EMAIL_SUA_VEZ_FILA, EMAIL_NOVOS_LIVROS, EMAIL_RECOMENDACOES,
    EMAIL_RELATORIO_MENSAL, EMAIL_ALERTA_ADMIN, EMAIL_DICAS_LEITURA,
    EMAIL_CONVITE_EVENTO, NOME_ESCOLA, ASSINATURA_PADRAO, PRAZO_EMPRESTIMO_DIAS
)

# Configura o logger
logger = logging.getLogger(__name__)

def registrar_acao(usuario, objeto, acao, descricao=''):
    """
    Registra uma a√ß√£o no hist√≥rico do sistema.
    """
    try:
        HistoricoAcao.objects.create(
            usuario=usuario,
            objeto_tipo=type(objeto).__name__,
            objeto_id=objeto.id,
            acao=acao,
            descricao=descricao
        )
    except Exception as e:
        logger.error(f"Erro ao registrar a√ß√£o para o objeto {objeto.__class__.__name__} (ID: {objeto.id}): {e}")


def enviar_email(destinatario, assunto, mensagem):
    """
    Envia um e-mail usando o backend configurado.
    """
    try:
        send_mail(
            subject=assunto,
            message=mensagem,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[destinatario],
            fail_silently=False,
        )
        logger.info(f"Email enviado para {destinatario}")
        return True
    except Exception as e:
        logger.error(f"Falha ao enviar email para {destinatario}: {str(e)}")
        return False


def enviar_lembretes_de_devolucao():
    """
    Envia lembretes de devolu√ß√£o para empr√©stimos que vencem amanh√£.
    üìß USA O EMAIL PREDEFINIDO PARA LEMBRETE DE DEVOLU√á√ÉO
    """
    hoje = date.today()
    # Calcular data de devolu√ß√£o (15 dias ap√≥s empr√©stimo)
    data_limite_emprestimo = hoje - timedelta(days=12)  # Empr√©stimos que vencem em 3 dias

    # Buscar empr√©stimos que vencem em 3 dias
    emprestimos_vencendo = Emprestimo.objects.filter(
        data_emprestimo__date=data_limite_emprestimo,
        devolvido=False
    )

    for emprestimo in emprestimos_vencendo:
        # üìß USAR EMAIL PREDEFINIDO DE LEMBRETE 3 DIAS
        enviar_email_lembrete_devolucao_3_dias(emprestimo)
        registrar_acao(None, emprestimo, 'NOTIFICACAO', descricao=f'Lembrete de devolu√ß√£o enviado para {emprestimo.usuario.nome} sobre o livro {emprestimo.livro.titulo}.')


def enviar_avisos_reserva_expirando():
    """
    Envia avisos para reservas que est√£o prestes a expirar.
    üìß USA O EMAIL PREDEFINIDO PARA LEMBRETE DE RETIRADA
    """
    # CORRE√á√ÉO: Usar 'now()' diretamente, pois 'timezone' n√£o √© o objeto importado.
    hoje = now().date()
    # Supondo que a validade da reserva √© de 2 dias e o aviso √© enviado no dia anterior √† expira√ß√£o
    # Ajuste esta l√≥gica conforme a regra de neg√≥cio da validade da reserva
    reservas = Reserva.objects.filter(
        status='aguardando_retirada', # Status mais apropriado para reservas aguardando retirada
        data_retirada_prevista__lte=hoje + timedelta(days=1), # Exemplo: Avisar se a retirada √© at√© amanh√£
        notificado_em__isnull=True # Para evitar enviar m√∫ltiplos avisos
    ).exclude(status__in=['expirada', 'cancelada', 'concluida']) # Excluir reservas j√° finalizadas

    for reserva in reservas:
        # üìß USAR EMAIL PREDEFINIDO DE LEMBRETE DE RETIRADA
        if enviar_email_lembrete_retirada(reserva):
            # Marca a reserva como notificada para evitar reenvios
            reserva.notificado_em = now()
            reserva.save(update_fields=['notificado_em'])
            registrar_acao(None, reserva, 'NOTIFICACAO', descricao=f'Aviso de reserva expirando enviado para {reserva.aluno.nome} sobre o livro {reserva.livro.titulo}.')
        else:
            logger.warning(f"Falha ao enviar e-mail de aviso de reserva expirando para {reserva.aluno.email} (Reserva: {reserva.id}).")


def notificar_primeiro_da_fila(livro):
    """
    Notifica o pr√≥ximo usu√°rio na fila de espera por um livro.
    üìß USA O EMAIL PREDEFINIDO PARA NOTIFICA√á√ÉO DA FILA
    """
    reserva = Reserva.objects.filter(
        livro=livro,
        status='na_fila' # Apenas reservas que est√£o na fila
    ).order_by('data_reserva').first() # Pega o mais antigo na fila

    if reserva:
        # üìß USAR EMAIL PREDEFINIDO DE "SUA VEZ NA FILA"
        if enviar_email_sua_vez_fila(reserva):
            reserva.notificado_em = now() # Atualiza o campo notificado_em com now()
            # O status da reserva permanece 'na_fila' ou pode ser alterado para 'aguardando_retirada'
            # se a notifica√ß√£o implica que o livro est√° pronto para ser retirado.
            # Se a l√≥gica √© que o usu√°rio precisa AGENDAR a retirada, 'na_fila' ainda faz sentido.
            # Se a notifica√ß√£o significa que ele PODE retirar, ent√£o 'aguardando_retirada' √© melhor.
            # Pelo texto do e-mail, parece que ele PODE retirar.
            reserva.status = 'aguardando_retirada' # Muda o status para aguardando retirada
            reserva.save()
            registrar_acao(None, reserva, 'NOTIFICACAO', descricao=f'Primeiro da fila notificado: {reserva.aluno.nome} sobre o livro {livro.titulo}.')
        else:
            logger.error(f"N√£o foi poss√≠vel notificar o primeiro da fila para o livro {livro.titulo}.")


def enviar_notificacao_alerta_publico(alerta_id):
    """
    Envia e-mail de notifica√ß√£o para todos os usu√°rios eleg√≠veis (alunos e professores)
    quando um AlertaSistema p√∫blico √© criado ou atualizado.
    """
    try:
        alerta = AlertaSistema.objects.get(id=alerta_id)
    except AlertaSistema.DoesNotExist:
        logger.error(f"AlertaSistema com ID {alerta_id} n√£o encontrado para envio de notifica√ß√£o.")
        return

    # S√≥ envia se o alerta for p√∫blico e ainda n√£o tiver sido enviado
    if alerta.visibilidade == 'publico' and not alerta.email_enviado:
        # Filtra usu√°rios que s√£o alunos ou professores e est√£o ativos
        # Exclui administradores, pois eles gerenciam os alertas
        usuarios_para_notificar = Usuario.objects.filter(
            ativo=True,
            tipo__in=['aluno', 'professor']
        )

        assunto = f"Alerta da Biblioteca: {alerta.titulo}"
        mensagem = f"""
Ola!

A Biblioteca Escolar tem um novo alerta para voce:

Titulo: {alerta.titulo}
Mensagem: {alerta.mensagem}

Tipo de Alerta: {alerta.get_tipo_display()}
Data de Publicacao: {alerta.data_publicacao.strftime('%d/%m/%Y %H:%M')}
{'Expira em: ' + alerta.expira_em.strftime('%d/%m/%Y %H:%M') if alerta.expira_em else ''}

Por favor, verifique o sistema para mais detalhes.

Atenciosamente,
Sistema de Biblioteca Escolar
"""
        emails_enviados_com_sucesso = []
        emails_falharam = []
        
        for usuario in usuarios_para_notificar:
            if enviar_email(usuario.email, assunto, mensagem):
                emails_enviados_com_sucesso.append(usuario.email)
            else:
                emails_falharam.append(usuario.email)
                logger.warning(f"Falha ao enviar e-mail de alerta para {usuario.email} (Alerta: {alerta.titulo}).")

        # Sempre marca como enviado para n√£o bloquear o sistema
        total_usuarios = len(usuarios_para_notificar)
        alerta.email_enviado = True
        alerta.save(update_fields=['email_enviado'])
        
        if len(emails_enviados_com_sucesso) > 0:
            registrar_acao(None, alerta, 'NOTIFICACAO', 
                         descricao=f'E-mail de alerta p√∫blico "{alerta.titulo}" enviado para {len(emails_enviados_com_sucesso)}/{total_usuarios} usu√°rios.')
            logger.info(f"Alerta '{alerta.titulo}' processado. Sucesso: {len(emails_enviados_com_sucesso)}/{total_usuarios}")
        else:
            registrar_acao(None, alerta, 'NOTIFICACAO', 
                         descricao=f'Alerta p√∫blico "{alerta.titulo}" criado (emails falharam por problema de conex√£o).')
            logger.warning(f"Alerta '{alerta.titulo}' criado mas emails falharam. Problema de conex√£o SMTP.")


# =============================================================================
# üìß SISTEMA DE EMAILS AUTOM√ÅTICOS PREDEFINIDOS
# =============================================================================

# -----------------------------------------------------------------------------
# üéØ 1. AUTENTICA√á√ÉO E BOAS-VINDAS
# -----------------------------------------------------------------------------

def enviar_email_boas_vindas(usuario):
    """
    üìù Email de Boas-vindas (Novo Cadastro)
    Enviado quando um novo usu√°rio √© criado no sistema
    üìß TEMPLATE EDIT√ÅVEL EM: email_templates.py -> EMAIL_BOAS_VINDAS
    """
    # USAR TEMPLATE CONFIGUR√ÅVEL
    assunto = EMAIL_BOAS_VINDAS['assunto']
    mensagem = EMAIL_BOAS_VINDAS['template'].format(
        nome=usuario.nome,
        email=usuario.email,
        ra=usuario.ra,
        turma=usuario.turma,
        tipo=usuario.get_tipo_display()
    )
    
    if enviar_email(usuario.email, assunto, mensagem):
        registrar_acao(None, usuario, 'NOTIFICACAO', descricao=f'Email de boas-vindas enviado para {usuario.nome}')
        return True
    return False

# -----------------------------------------------------------------------------
# üìö 2. RESERVAS E AGENDAMENTOS
# -----------------------------------------------------------------------------

def enviar_email_confirmacao_reserva(reserva):
    """
    ‚úÖ Confirma√ß√£o de Reserva
    Enviado quando uma reserva √© criada com sucesso
    üìß TEMPLATE EDIT√ÅVEL EM: email_templates.py -> EMAIL_CONFIRMACAO_RESERVA
    """
    # USAR TEMPLATE CONFIGUR√ÅVEL
    data_retirada = reserva.data_retirada_prevista.strftime('%d/%m/%Y') if reserva.data_retirada_prevista else 'A definir'
    hora_retirada = reserva.hora_retirada_prevista.strftime('%H:%M') if reserva.hora_retirada_prevista else 'A definir'
    
    assunto = EMAIL_CONFIRMACAO_RESERVA['assunto'].format(titulo=reserva.livro.titulo)
    mensagem = EMAIL_CONFIRMACAO_RESERVA['template'].format(
        nome=reserva.aluno.nome,
        titulo=reserva.livro.titulo,
        autor=reserva.livro.autor,
        data_retirada=data_retirada,
        hora_retirada=hora_retirada
    )
    
    if enviar_email(reserva.aluno.email, assunto, mensagem):
        registrar_acao(None, reserva, 'NOTIFICACAO', descricao=f'Email de confirma√ß√£o de reserva enviado para {reserva.aluno.nome}')
        return True
    return False

def enviar_email_lembrete_retirada(reserva):
    """
    ‚è∞ Lembrete de Retirada (1 dia antes)
    Enviado 1 dia antes da data de retirada agendada
    """
    assunto = "‚è∞ Lembrete: Retire seu livro amanh√£!"
    
    # TEMPLATE DE LEMBRETE DE RETIRADA - Edit√°vel aqui
    data_retirada = reserva.data_retirada_prevista.strftime('%d/%m/%Y')
    hora_retirada = reserva.hora_retirada_prevista.strftime('%H:%M')
    
    mensagem = f"""
Ol√° {reserva.aluno.nome},

N√£o esque√ßa! Amanh√£ √© o dia de retirar seu livro reservado.

üìö \"{reserva.livro.titulo}\"
üìÖ Data: {data_retirada} √†s {hora_retirada}
üìç Local: Biblioteca da Escola

N√£o consegue comparecer? 
‚Ä¢ Reagende pelo sistema
‚Ä¢ Ou cancele a reserva

üì± Gerencie sua reserva no sistema!

At√© amanh√£!
Equipe da Biblioteca
"""
    
    if enviar_email(reserva.aluno.email, assunto, mensagem):
        registrar_acao(None, reserva, 'NOTIFICACAO', descricao=f'Email de lembrete de retirada enviado para {reserva.aluno.nome}')
        return True
    return False

def enviar_email_reserva_cancelada(reserva):
    """
    ‚ùå Reserva Cancelada
    Enviado quando uma reserva √© cancelada
    """
    assunto = f"‚ùå Reserva Cancelada: \"{reserva.livro.titulo}\""
    
    # TEMPLATE DE RESERVA CANCELADA - Edit√°vel aqui
    data_seria_retirada = reserva.data_retirada_prevista.strftime('%d/%m/%Y') if reserva.data_retirada_prevista else 'Data n√£o definida'
    
    mensagem = f"""
Ol√° {reserva.aluno.nome},

Sua reserva foi cancelada conforme solicitado.

üìö Livro: {reserva.livro.titulo}
üìÖ Data que seria retirada: {data_seria_retirada}

üí° Quer reservar novamente?
Acesse o sistema e fa√ßa uma nova reserva quando desejar.

üì± Explore mais livros no sistema!

Equipe da Biblioteca
"""
    
    if enviar_email(reserva.aluno.email, assunto, mensagem):
        registrar_acao(None, reserva, 'NOTIFICACAO', descricao=f'Email de cancelamento de reserva enviado para {reserva.aluno.nome}')
        return True
    return False

# -----------------------------------------------------------------------------
# üìñ 3. EMPR√âSTIMOS
# -----------------------------------------------------------------------------

def enviar_email_emprestimo_confirmado(emprestimo):
    """
    üéâ Empr√©stimo Confirmado
    Enviado quando um empr√©stimo √© registrado
    üìß TEMPLATE EDIT√ÅVEL EM: email_templates.py -> EMAIL_EMPRESTIMO_CONFIRMADO
    """
    # USAR TEMPLATE CONFIGUR√ÅVEL
    data_emprestimo = emprestimo.data_emprestimo.strftime('%d/%m/%Y')
    data_devolucao = (emprestimo.data_emprestimo + timedelta(days=PRAZO_EMPRESTIMO_DIAS)).strftime('%d/%m/%Y')
    
    assunto = EMAIL_EMPRESTIMO_CONFIRMADO['assunto'].format(titulo=emprestimo.livro.titulo)
    mensagem = EMAIL_EMPRESTIMO_CONFIRMADO['template'].format(
        nome=emprestimo.usuario.nome,
        titulo=emprestimo.livro.titulo,
        data_emprestimo=data_emprestimo,
        data_devolucao=data_devolucao
    )
    
    if enviar_email(emprestimo.usuario.email, assunto, mensagem):
        registrar_acao(None, emprestimo, 'NOTIFICACAO', descricao=f'Email de confirma√ß√£o de empr√©stimo enviado para {emprestimo.usuario.nome}')
        return True
    return False

def enviar_email_lembrete_devolucao_3_dias(emprestimo):
    """
    ‚ö†Ô∏è Lembrete de Devolu√ß√£o (3 dias antes)
    Enviado 3 dias antes do vencimento
    """
    assunto = f"‚ö†Ô∏è Devolu√ß√£o em 3 dias: \"{emprestimo.livro.titulo}\""
    
    # TEMPLATE DE LEMBRETE 3 DIAS - Edit√°vel aqui
    data_devolucao = (emprestimo.data_emprestimo + timedelta(days=15)).strftime('%d/%m/%Y')
    
    mensagem = f"""
Ol√° {emprestimo.usuario.nome},

Seu prazo de devolu√ß√£o est√° chegando!

üìö Livro: {emprestimo.livro.titulo}
üìÖ Devolu√ß√£o: {data_devolucao} (em 3 dias)

‚úÖ OP√á√ïES:
‚Ä¢ Devolver na biblioteca
‚Ä¢ Renovar empr√©stimo (se dispon√≠vel)
‚Ä¢ Solicitar prorroga√ß√£o

‚ö†Ô∏è Atraso gera multa de R$ 1,00/dia

üì± Gerencie seu empr√©stimo no sistema!

Equipe da Biblioteca
"""
    
    if enviar_email(emprestimo.usuario.email, assunto, mensagem):
        registrar_acao(None, emprestimo, 'NOTIFICACAO', descricao=f'Email de lembrete 3 dias enviado para {emprestimo.usuario.nome}')
        return True
    return False

def enviar_email_livro_atraso(emprestimo):
    """
    üö® Livro em Atraso (1 dia ap√≥s vencimento)
    Enviado quando o livro est√° em atraso
    """
    assunto = f"üö® URGENTE: Livro em atraso - \"{emprestimo.livro.titulo}\""
    
    # TEMPLATE DE LIVRO EM ATRASO - Edit√°vel aqui
    data_deveria_devolver = (emprestimo.data_emprestimo + timedelta(days=15)).strftime('%d/%m/%Y')
    dias_atraso = (now().date() - (emprestimo.data_emprestimo + timedelta(days=15)).date()).days
    
    mensagem = f"""
Ol√° {emprestimo.usuario.nome},

Seu livro est√° em atraso desde ontem.

üìö Livro: {emprestimo.livro.titulo}
üìÖ Deveria ter sido devolvido: {data_deveria_devolver}
üí∞ Multa atual: R$ {multa:.2f}

üèÉ‚ôÇÔ∏è A√á√ÉO NECESS√ÅRIA:
Devolva o livro hoje mesmo na biblioteca.

üìç Hor√°rio de funcionamento:
Segunda a Sexta: 8h √†s 17h

üì± Contato da biblioteca dispon√≠vel no sistema

Equipe da Biblioteca
"""
    
    if enviar_email(emprestimo.usuario.email, assunto, mensagem):
        registrar_acao(None, emprestimo, 'NOTIFICACAO', descricao=f'Email de livro em atraso enviado para {emprestimo.usuario.nome}')
        return True
    return False

def enviar_email_devolucao_confirmada(emprestimo):
    """
    ‚úÖ Devolu√ß√£o Confirmada
    Enviado quando um livro √© devolvido
    """
    assunto = f"‚úÖ Devolu√ß√£o Confirmada: \"{emprestimo.livro.titulo}\""
    
    # TEMPLATE DE DEVOLU√á√ÉO CONFIRMADA - Edit√°vel aqui
    data_devolucao = emprestimo.data_devolucao.strftime('%d/%m/%Y') if emprestimo.data_devolucao else now().strftime('%d/%m/%Y')
    
    mensagem = f"""
Ol√° {emprestimo.usuario.nome},

Obrigado por devolver o livro! üìö

üìñ Livro: {emprestimo.livro.titulo}
üìÖ Data de Devolu√ß√£o: {data_devolucao}
üí∞ Multa: R$ 0,00

‚≠ê Que tal avaliar sua experi√™ncia?
Acesse o sistema e deixe sua avalia√ß√£o!

üîç Explore mais livros no sistema!

Continue lendo!
Equipe da Biblioteca
"""
    
    if enviar_email(emprestimo.usuario.email, assunto, mensagem):
        registrar_acao(None, emprestimo, 'NOTIFICACAO', descricao=f'Email de devolu√ß√£o confirmada enviado para {emprestimo.usuario.nome}')
        return True
    return False

# -----------------------------------------------------------------------------
# üìã 4. FILA DE ESPERA
# -----------------------------------------------------------------------------

def enviar_email_entrada_fila(reserva):
    """
    üéØ Entrada na Fila
    Enviado quando usu√°rio entra na fila de espera
    üìß TEMPLATE EDIT√ÅVEL EM: email_templates.py -> EMAIL_ENTRADA_FILA
    """
    # CALCULAR POSI√á√ÉO NA FILA
    posicao = Reserva.objects.filter(
        livro=reserva.livro,
        status='na_fila',
        data_reserva__lt=reserva.data_reserva
    ).count() + 1
    
    total_fila = Reserva.objects.filter(livro=reserva.livro, status='na_fila').count()
    previsao_dias = posicao * PRAZO_EMPRESTIMO_DIAS
    
    # USAR TEMPLATE CONFIGUR√ÅVEL
    assunto = EMAIL_ENTRADA_FILA['assunto'].format(titulo=reserva.livro.titulo)
    mensagem = EMAIL_ENTRADA_FILA['template'].format(
        nome=reserva.aluno.nome,
        titulo=reserva.livro.titulo,
        posicao=posicao,
        total_fila=total_fila,
        previsao_dias=previsao_dias
    )
    
    if enviar_email(reserva.aluno.email, assunto, mensagem):
        registrar_acao(None, reserva, 'NOTIFICACAO', descricao=f'Email de entrada na fila enviado para {reserva.aluno.nome}')
        return True
    return False

def enviar_email_sua_vez_fila(reserva):
    """
    üéâ Sua Vez na Fila
    Enviado quando √© a vez do usu√°rio na fila
    üìß TEMPLATE EDIT√ÅVEL EM: email_templates.py -> EMAIL_SUA_VEZ_FILA
    """
    # USAR TEMPLATE CONFIGUR√ÅVEL
    assunto = EMAIL_SUA_VEZ_FILA['assunto'].format(titulo=reserva.livro.titulo)
    mensagem = EMAIL_SUA_VEZ_FILA['template'].format(
        nome=reserva.aluno.nome,
        titulo=reserva.livro.titulo
    )
    
    if enviar_email(reserva.aluno.email, assunto, mensagem):
        registrar_acao(None, reserva, 'NOTIFICACAO', descricao=f'Email de sua vez na fila enviado para {reserva.aluno.nome}')
        return True
    return False

# -----------------------------------------------------------------------------
# üîî 5. NOTIFICA√á√ïES GERAIS
# -----------------------------------------------------------------------------

def enviar_email_novos_livros(usuarios_lista, livros_novos):
    """
    üìö Novos Livros Adicionados
    Enviado quando novos livros s√£o adicionados ao sistema
    """
    assunto = "üìö Novidades na biblioteca! Confira os novos livros"
    
    # TEMPLATE DE NOVOS LIVROS - Edit√°vel aqui
    lista_livros = "\n".join([f"‚Ä¢ {livro.titulo} - {livro.autor}" for livro in livros_novos[:3]])
    
    for usuario in usuarios_lista:
        mensagem = f"""
Ol√° {usuario.nome},

Chegaram livros novos na nossa biblioteca! üéâ

üìñ DESTAQUES DESTA SEMANA:
{lista_livros}

üîç Veja todos os novos livros no sistema!

üì± Acesse o sistema da biblioteca!

Boa leitura!
Equipe da Biblioteca
"""
        
        if enviar_email(usuario.email, assunto, mensagem):
            registrar_acao(None, usuario, 'NOTIFICACAO', descricao=f'Email de novos livros enviado para {usuario.nome}')

def enviar_email_recomendacoes(usuario, livros_recomendados):
    """
    ‚≠ê Recomenda√ß√µes Personalizadas
    Enviado com recomenda√ß√µes baseadas no hist√≥rico do usu√°rio
    """
    assunto = f"‚≠ê Livros especiais para voc√™, {usuario.nome}!"
    
    # TEMPLATE DE RECOMENDA√á√ïES - Edit√°vel aqui
    lista_recomendados = "\n".join([f"‚Ä¢ {livro.titulo} - {livro.autor}" for livro in livros_recomendados[:3]])
    
    mensagem = f"""
Ol√° {usuario.nome},

Com base no seu hist√≥rico, selecionamos estes livros:

üìö RECOMENDADOS PARA VOC√ä:
{lista_recomendados}

üéØ Por que recomendamos:
Voc√™ gostou de livros similares no passado!

üîç Veja as recomenda√ß√µes no sistema!

Equipe da Biblioteca
"""
    
    if enviar_email(usuario.email, assunto, mensagem):
        registrar_acao(None, usuario, 'NOTIFICACAO', descricao=f'Email de recomenda√ß√µes enviado para {usuario.nome}')
        return True
    return False

# -----------------------------------------------------------------------------
# üìä 6. RELAT√ìRIOS E ESTAT√çSTICAS
# -----------------------------------------------------------------------------

def enviar_email_relatorio_mensal(usuario, estatisticas):
    """
    üìà Relat√≥rio Mensal do Usu√°rio
    Enviado mensalmente com estat√≠sticas de leitura
    """
    assunto = f"üìà Seu relat√≥rio de leitura - {now().strftime('%m/%Y')}"
    
    # TEMPLATE DE RELAT√ìRIO MENSAL - Edit√°vel aqui
    mensagem = f"""
Ol√° {usuario.nome},

Veja como foi seu m√™s na biblioteca! üìö

üìä SUAS ESTAT√çSTICAS:
‚Ä¢ Livros lidos: {estatisticas.get('livros_lidos', 0)}
‚Ä¢ P√°ginas lidas: {estatisticas.get('paginas_lidas', 0)}
‚Ä¢ G√™nero favorito: {estatisticas.get('genero_favorito', 'N√£o definido')}
‚Ä¢ Tempo m√©dio de leitura: {estatisticas.get('tempo_medio', 0)} dias

üèÜ CONQUISTAS:
‚Ä¢ Leitor ativo do m√™s!
‚Ä¢ Meta de leitura alcan√ßada!

üìö PR√ìXIMAS METAS:
‚Ä¢ Ler mais livros este m√™s
‚Ä¢ Explorar novos g√™neros

üì± Veja o relat√≥rio completo no sistema!

Continue lendo!
Equipe da Biblioteca
"""
    
    if enviar_email(usuario.email, assunto, mensagem):
        registrar_acao(None, usuario, 'NOTIFICACAO', descricao=f'Email de relat√≥rio mensal enviado para {usuario.nome}')
        return True
    return False

# -----------------------------------------------------------------------------
# üö® 7. ALERTAS ADMINISTRATIVOS
# -----------------------------------------------------------------------------

def enviar_email_alerta_admin(admin_email, tipo_alerta, detalhes):
    """
    ‚ö†Ô∏è Alerta de Sistema (Para Admins)
    Enviado para administradores sobre eventos importantes
    """
    assunto = f"üö® ALERTA: {tipo_alerta} - Sistema Biblioteca"
    
    # TEMPLATE DE ALERTA ADMIN - Edit√°vel aqui
    mensagem = f"""
Ol√° Administrador,

Alerta detectado no sistema:

üîç DETALHES:
‚Ä¢ Tipo: {tipo_alerta}
‚Ä¢ Usu√°rio: {detalhes.get('usuario', 'N/A')}
‚Ä¢ Livro: {detalhes.get('livro', 'N/A')}
‚Ä¢ Data: {now().strftime('%d/%m/%Y %H:%M')}
‚Ä¢ Prioridade: {detalhes.get('prioridade', 'M√©dia')}

üîß A√á√ÉO NECESS√ÅRIA:
{detalhes.get('acao', 'Verificar sistema')}

üì± Acesse o painel administrativo!

Sistema de Biblioteca
"""
    
    if enviar_email(admin_email, assunto, mensagem):
        logger.info(f'Email de alerta administrativo enviado: {tipo_alerta}')
        return True
    return False

# -----------------------------------------------------------------------------
# üéì 8. EMAILS EDUCACIONAIS
# -----------------------------------------------------------------------------

def enviar_email_dicas_leitura(usuarios_lista, dica_titulo, dica_conteudo, livro_sugerido=None):
    """
    üí° Dicas de Leitura
    Enviado semanalmente com dicas educacionais
    """
    assunto = f"üí° Dica da semana: {dica_titulo}"
    
    # TEMPLATE DE DICAS DE LEITURA - Edit√°vel aqui
    livro_texto = f"\n\nüìö Livro da semana: \"{livro_sugerido.titulo}\"\nPerfeito para praticar essa t√©cnica!" if livro_sugerido else ""
    
    for usuario in usuarios_lista:
        mensagem = f"""
Ol√° {usuario.nome},

Dica desta semana para turbinar sua leitura! üìö

üí° DICA: \"{dica_titulo}\"
{dica_conteudo}
{livro_texto}

üîç Explore mais no sistema!

Boa leitura!
Equipe da Biblioteca
"""
        
        if enviar_email(usuario.email, assunto, mensagem):
            registrar_acao(None, usuario, 'NOTIFICACAO', descricao=f'Email de dicas de leitura enviado para {usuario.nome}')

# -----------------------------------------------------------------------------
# üéâ 9. EVENTOS E PROMO√á√ïES
# -----------------------------------------------------------------------------

def enviar_email_convite_evento(usuarios_lista, nome_evento, data_evento, horario, local, programacao):
    """
    üé™ Convite para Eventos
    Enviado para convidar usu√°rios para eventos da biblioteca
    """
    assunto = f"üé™ Convite: {nome_evento} na biblioteca!"
    
    # TEMPLATE DE CONVITE EVENTO - Edit√°vel aqui
    programacao_texto = "\n".join([f"‚Ä¢ {atividade}" for atividade in programacao])
    
    for usuario in usuarios_lista:
        mensagem = f"""
Ol√° {usuario.nome},

Voc√™ est√° convidado para nosso evento especial! üéâ

üìÖ EVENTO: {nome_evento}
üìÖ Data: {data_evento}
‚è∞ Hor√°rio: {horario}
üìç Local: {local}
üë• Vagas limitadas!

üéØ PROGRAMA√á√ÉO:
{programacao_texto}

‚úÖ Confirme sua presen√ßa no sistema!

üì± Mais informa√ß√µes no sistema!

Te esperamos!
Equipe da Biblioteca
"""
        
        if enviar_email(usuario.email, assunto, mensagem):
            registrar_acao(None, usuario, 'NOTIFICACAO', descricao=f'Email de convite para evento enviado para {usuario.nome}')

# -----------------------------------------------------------------------------
# üìß FUN√á√ÉO PARA ENVIO MANUAL DE EMAIL
# -----------------------------------------------------------------------------

def enviar_email_manual(destinatario_email, assunto_personalizado, mensagem_personalizada, remetente_usuario=None):
    """
    üìß Envio Manual de Email
    Permite enviar emails personalizados atrav√©s do sistema
    """
    if enviar_email(destinatario_email, assunto_personalizado, mensagem_personalizada):
        if remetente_usuario:
            registrar_acao(remetente_usuario, None, 'NOTIFICACAO', 
                         descricao=f'Email manual enviado para {destinatario_email} com assunto: {assunto_personalizado}')
        logger.info(f'Email manual enviado para {destinatario_email}')
        return True
    return False
